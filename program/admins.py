import traceback

from cache.admins import admins
from driver.core import calls, bot
from pyrogram import Client, filters
from driver.design.thumbnail import thumb
from driver.design.chatname import CHAT_TITLE
from driver.queues import QUEUE, clear_queue
from driver.filters import command, other_filters
from driver.decorators import authorized_users_only, check_blacklist
from driver.utils import skip_current_song, skip_item, remove_if_exists


from driver.database.dbqueue import (
    is_music_playing,
    remove_active_chat,
    music_off,
    music_on,
)
from program.utils.inline import (
    stream_markup,
    close_mark,
    back_mark,
)
from config import (
    BOT_USERNAME,
    GROUP_SUPPORT,
    IMG_5,
    UPDATES_CHANNEL,
)
from pyrogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)


@Client.on_message(command(["reload", f"reload@{BOT_USERNAME}"]) & other_filters)
@authorized_users_only
@check_blacklist()
async def update_admin(client, message: Message):
    global admins
    new_admins = []
    new_ads = await client.get_chat_members(message.chat.id, filter="administrators")
    for u in new_ads:
        new_admins.append(u.user.id)
    admins[message.chat.id] = new_admins
    await message.reply_text(
        "‚úÖ  ô·¥è·¥õ ** Ä·¥á ü·¥è·¥Ä·¥Ö·¥á·¥Ö ·¥Ñ·¥è Ä Ä·¥á·¥Ñ·¥õ ü è !**\n‚úÖ **·¥Ä·¥Ö·¥ç…™…¥  ü…™s·¥õ**  ú·¥Äs **·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á·¥Ö !**"
    )


@Client.on_message(
    command(["stop", f"stop@{BOT_USERNAME}", "end", f"end@{BOT_USERNAME}", "vstop"])
    & other_filters
)
@authorized_users_only
@check_blacklist()
async def stop(client, m: Message):
    chat_id = m.chat.id
    if chat_id in QUEUE:
        try:
            await calls.leave_group_call(chat_id)
            await remove_active_chat(chat_id)
            clear_queue(chat_id)
            await m.reply("‚úÖ ·¥õ ú·¥á ·¥ús·¥á Ä ô·¥è·¥õ  ú·¥Äs ·¥Ö…™s·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö “ì Ä·¥è·¥ç ·¥õ ú·¥á ·¥†…™·¥Ö·¥á·¥è ·¥Ñ ú·¥Ät.")
        except Exception as e:
            traceback.print_exc()
            await m.reply(f"üö´ **error:**\n\n`{e}`")
    else:
        await m.reply("‚ùå **…¥·¥è·¥õ ú…™…¥…¢ …™s s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢**")


@Client.on_message(
    command(["pause", f"pause@{BOT_USERNAME}", "vpause"]) & other_filters
)
@authorized_users_only
@check_blacklist()
async def pause(client, m: Message):
    chat_id = m.chat.id
    if chat_id in QUEUE:
        try:
            if not await is_music_playing(chat_id):
                await m.reply("‚ÑπÔ∏è ·¥õ ú·¥á ·¥ç·¥ús…™·¥Ñ …™s ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥ò·¥Ä·¥ús·¥á·¥Ö.")
                return
            await calls.pause_stream(chat_id)
            await music_off(chat_id)
            await m.reply(
                "‚è∏ **·¥õ Ä·¥Ä·¥Ñ·¥ã ·¥ò·¥Ä·¥ús·¥á·¥Ö.**\n\n‚Ä¢ **·¥õ·¥è  Ä·¥ás·¥ú·¥ç·¥á ·¥õ ú·¥á s·¥õ Ä·¥á·¥Ä·¥ç, ·¥ús·¥á ·¥õ ú·¥á**\n¬ª /resume ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö."
            )
        except Exception as e:
            traceback.print_exc()
            await m.reply(f"üö´ **·¥á Ä Ä·¥è Ä:**\n\n`{e}`")
    else:
        await m.reply("‚ùå **…¥·¥è·¥õ ú…™…¥…¢ …™s s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢**")


@Client.on_message(
    command(["resume", f"resume@{BOT_USERNAME}", "vresume"]) & other_filters
)
@authorized_users_only
@check_blacklist()
async def resume(client, m: Message):
    chat_id = m.chat.id
    if chat_id in QUEUE:
        try:
            if await is_music_playing(chat_id):
                await m.reply("‚ÑπÔ∏è ·¥õ ú·¥á ·¥ç·¥ús…™·¥Ñ …™s ·¥Ä ü Ä·¥á·¥Ä·¥Ö è  Ä·¥ás·¥ú·¥ç·¥á·¥Ö.")
                return
            await calls.resume_stream(chat_id)
            await music_on(chat_id)
            await m.reply(
                "‚ñ∂Ô∏è **·¥õ Ä·¥Ä·¥Ñ·¥ã  Ä·¥ás·¥ú·¥ç·¥á·¥Ö.**\n\n‚Ä¢ **·¥õ·¥è ·¥ò·¥Ä·¥ús·¥á ·¥õ ú·¥á s·¥õ Ä·¥á·¥Ä·¥ç, ·¥ús·¥á ·¥õ ú·¥á**\n¬ª /pause ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö."
            )
        except Exception as e:
            traceback.print_exc()
            await m.reply(f"üö´ **·¥á Ä Ä·¥è Ä:**\n\n`{e}`")
    else:
        await m.reply("‚ùå **…¥·¥è·¥õ ú…™…¥…¢ …™s s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢**")


@Client.on_message(command(["skip", f"skip@{BOT_USERNAME}", "vskip"]) & other_filters)
@authorized_users_only
@check_blacklist()
async def skip(c: Client, m: Message):
    user_id = m.from_user.id
    chat_id = m.chat.id
    if len(m.command) < 2:
        op = await skip_current_song(chat_id)
        if op == 0:
            await c.send_message(chat_id, "‚ùå …¥·¥è·¥õ ú…™…¥…¢ …™s ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ü è ·¥ò ü·¥Ä è…™…¥…¢")
        elif op == 1:
            await c.send_message(chat_id, "ü•∫ ·¥õ ú·¥á Ä·¥á's …¥·¥è ·¥ç·¥è Ä·¥á ·¥ç·¥ús…™·¥Ñ …™…¥ «´·¥ú·¥á·¥ú·¥á ·¥õ·¥è s·¥ã…™·¥ò, ·¥ús·¥á Ä ô·¥è·¥õ  ü·¥á·¥Ä·¥†…™…¥…¢ ·¥†…™·¥Ö·¥á·¥è ·¥Ñ ú·¥Ä·¥õ.")
        elif op == 2:
            await c.send_message(chat_id, "üíì ·¥Ñ ü·¥á·¥Ä Ä…™…¥…¢ ·¥õ ú·¥á **«´·¥ú·¥á·¥ú·¥ás**\n\n**‚Ä¢ ·¥ús·¥á Ä ô·¥è·¥õ**  ü·¥á·¥Ä·¥†…™…¥…¢ ·¥†…™·¥Ö·¥á·¥è ·¥Ñ ú·¥Ä·¥õ.")
        else:
            buttons = stream_markup(user_id)
            requester = f"[{m.from_user.first_name}](tg://user?id={m.from_user.id})"
            thumbnail = f"{IMG_5}"
            title = f"{op[0]}"
            userid = m.from_user.id
            gcname = m.chat.title
            ctitle = await CHAT_TITLE(gcname)
            image = await gen_thumb(thumbnail, title, userid, ctitle)
            await c.send_photo(
                chat_id,
                photo=image,
                reply_markup=InlineKeyboardMarkup(buttons),
                caption=f"üî• **s·¥ã…™·¥ò·¥ò·¥á·¥Ö** ·¥õ·¥è ·¥õ ú·¥á …¥·¥áx·¥õ ·¥õ Ä·¥Ä·¥Ñ·¥ã.\n\nüóÇ **…¥·¥Ä·¥ç·¥á:** [{op[0]}]({op[1]})\nüí≠ **·¥Ñ ú·¥Ä·¥õ:** `{chat_id}`\nüß∏ ** Ä·¥á«´·¥ú·¥ás·¥õ  ô è:** {requester}",
            )
            remove_if_exists(image)
    else:
        skip = m.text.split(None, 1)[1]
        track = "üóë  Ä·¥á·¥ç·¥è·¥†·¥á·¥Ö s·¥è…¥…¢ “ì Ä·¥è·¥ç «´·¥ú·¥á·¥ú·¥á:"
        if chat_id in QUEUE:
            items = [int(x) for x in skip.split(" ") if x.isdigit()]
            items.sort(reverse=True)
            for x in items:
                if x == 0:
                    pass
                else:
                    data = await skip_item(chat_id, x)
                    if data == 0:
                        pass
                    else:
                        track = track + "\n" + f"**#{x}** - {hm}"
            await m.reply(track)


@Client.on_message(
    command(["mute", f"mute@{BOT_USERNAME}", "vmute"]) & other_filters
)
@authorized_users_only
@check_blacklist()
async def mute(client, m: Message):
    chat_id = m.chat.id
    if chat_id in QUEUE:
        try:
            if not await is_music_playing(chat_id):
                await m.reply("‚ÑπÔ∏è ·¥õ ú·¥á s·¥õ Ä·¥á·¥Ä·¥ç ·¥ús·¥á Ä ô·¥è·¥õ …™s ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥ç·¥ú·¥õ·¥á·¥Ö.")
                return
            await calls.mute_stream(chat_id)
            await music_off(chat_id)
            await m.reply(
                "üîá **·¥ús·¥á Ä ô·¥è·¥õ ·¥ç·¥ú·¥õ·¥á·¥Ö.**\n\n‚Ä¢ **·¥õ·¥è ·¥ú…¥·¥ç·¥ú·¥õ·¥á ·¥õ ú·¥á ·¥ús·¥á Ä ô·¥è·¥õ, ·¥ús·¥á ·¥õ ú·¥á**\n¬ª /unmute ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö."
            )
        except Exception as e:
            traceback.print_exc()
            await m.reply(f"üö´ **·¥á Ä Ä·¥è Ä:**\n\n`{e}`")
    else:
        await m.reply("‚ùå **…¥·¥è·¥õ ú…™…¥…¢ …™s s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢**")


@Client.on_message(
    command(["unmute", f"unmute@{BOT_USERNAME}", "vunmute"]) & other_filters
)
@authorized_users_only
@check_blacklist()
async def unmute(client, m: Message):
    chat_id = m.chat.id
    if chat_id in QUEUE:
        try:
            if await is_music_playing(chat_id):
                await m.reply("‚ÑπÔ∏è ·¥õ ú·¥á s·¥õ Ä·¥á·¥Ä·¥ç ·¥ús·¥á Ä ô·¥è·¥õ …™s ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥ú…¥·¥ç·¥ú·¥õ·¥á·¥Ö.")
                return
            await calls.unmute_stream(chat_id)
            await music_on(chat_id)
            await m.reply(
                "üîä **·¥ús·¥á Ä ô·¥è·¥õ ·¥ú…¥·¥ç·¥ú·¥õ·¥á·¥Ö.**\n\n‚Ä¢ **·¥õ·¥è ·¥ç·¥ú·¥õ·¥á ·¥õ ú·¥á ·¥ús·¥á Ä ô·¥è·¥õ, ·¥ús·¥á ·¥õ ú·¥á**\n¬ª /mute ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö."
            )
        except Exception as e:
            traceback.print_exc()
            await m.reply(f"üö´ **·¥á Ä Ä·¥è Ä:**\n\n`{e}`")
    else:
        await m.reply("‚ùå **…¥·¥è·¥õ ú…™…¥…¢ …™s s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢**")


@Client.on_callback_query(filters.regex("set_pause"))
@check_blacklist()
async def cbpause(_, query: CallbackQuery):
    a = await _.get_chat_member(query.message.chat.id, query.from_user.id)
    if not a.can_manage_voice_chats:
        return await query.answer("üí° ·¥è…¥ ü è ·¥Ä·¥Ö·¥ç…™…¥ ·¥°…™·¥õ ú ·¥ç·¥Ä…¥·¥Ä…¢·¥á ·¥†…™·¥Ö·¥á·¥è ·¥Ñ ú·¥Ä·¥õ ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥ ·¥õ ú·¥Ä·¥õ ·¥Ñ·¥Ä…¥ ·¥õ·¥Ä·¥ò ·¥õ ú…™s  ô·¥ú·¥õ·¥õ·¥è…¥ !", show_alert=True)
    chat_id = query.message.chat.id
    if chat_id in QUEUE:
        try:
            if not await is_music_playing(chat_id):
                await query.answer("‚ÑπÔ∏è ·¥õ ú·¥á ·¥ç·¥ús…™·¥Ñ …™s ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥ò·¥Ä·¥ús·¥á·¥Ö.", show_alert=True)
                return
            await calls.pause_stream(chat_id)
            await music_off(chat_id)
            await query.answer("‚è∏ ·¥õ ú·¥á ·¥ç·¥ús…™·¥Ñ  ú·¥Äs ·¥ò·¥Ä·¥ús·¥á·¥Ö !\n\n¬ª ·¥õ·¥è  Ä·¥ás·¥ú·¥ç·¥á ·¥õ ú·¥á ·¥ç·¥ús…™·¥Ñ ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥  Ä·¥ás·¥ú·¥ç·¥á  ô·¥ú·¥õ·¥õ·¥è…¥ !", show_alert=True)
        except Exception as e:
            traceback.print_exc()
            await query.edit_message_text(f"üö´ **·¥á Ä Ä·¥è Ä:**\n\n`{e}`", reply_markup=close_mark)
    else:
        await query.answer("‚ùå …¥·¥è·¥õ ú…™…¥…¢ …™s ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ü è s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢", show_alert=True)


@Client.on_callback_query(filters.regex("set_resume"))
@check_blacklist()
async def cbresume(_, query: CallbackQuery):
    a = await _.get_chat_member(query.message.chat.id, query.from_user.id)
    if not a.can_manage_voice_chats:
        return await query.answer("üí° ·¥è…¥ ü è ·¥Ä·¥Ö·¥ç…™…¥ ·¥°…™·¥õ ú ·¥ç·¥Ä…¥·¥Ä…¢·¥á ·¥†…™·¥Ö·¥á·¥è ·¥Ñ ú·¥Ä·¥õ ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥ ·¥õ ú·¥Ä·¥õ ·¥Ñ·¥Ä…¥ ·¥õ·¥Ä·¥ò ·¥õ ú…™s  ô·¥ú·¥õ·¥õ·¥è…¥ !", show_alert=True)
    chat_id = query.message.chat.id
    if chat_id in QUEUE:
        try:
            if await is_music_playing(chat_id):
                await query.answer("‚ÑπÔ∏è ·¥õ ú·¥á ·¥ç·¥ús…™·¥Ñ …™s ·¥Ä ü Ä·¥á·¥Ä·¥Ö è  Ä·¥ás·¥ú·¥ç·¥á·¥Ö.", show_alert=True)
                return
            await calls.resume_stream(chat_id)
            await music_on(chat_id)
            await query.answer("‚ñ∂Ô∏è ·¥õ ú·¥á ·¥ç·¥ús…™·¥Ñ  ú·¥Äs  Ä·¥ás·¥ú·¥ç·¥á·¥Ö !\n\n¬ª ·¥õ·¥è ·¥ò·¥Ä·¥ús·¥á ·¥õ ú·¥á ·¥ç·¥ús…™·¥Ñ ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ ·¥ò·¥Ä·¥ús·¥á  ô·¥ú·¥õ·¥õ·¥è…¥ !", show_alert=True)
        except Exception as e:
            traceback.print_exc()
            await query.edit_message_text(f"üö´ **·¥á Ä Ä·¥è Ä:**\n\n`{e}`", reply_markup=close_mark)
    else:
        await query.answer("‚ùå …¥·¥è·¥õ ú…™…¥…¢ …™s ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ü è s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢", show_alert=True)


@Client.on_callback_query(filters.regex("set_stop"))
@check_blacklist()
async def cbstop(_, query: CallbackQuery):
    a = await _.get_chat_member(query.message.chat.id, query.from_user.id)
    if not a.can_manage_voice_chats:
        return await query.answer("üî• ·¥è…¥ ü è ·¥Ä·¥Ö·¥ç…™…¥ ·¥°…™·¥õ ú ·¥ç·¥Ä…¥·¥Ä…¢·¥á ·¥†…™·¥Ö·¥á·¥è ·¥Ñ ú·¥Ä·¥õ ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥ ·¥õ ú·¥Ä·¥õ ·¥Ñ·¥Ä…¥ ·¥õ·¥Ä·¥ò ·¥õ ú…™s  ô·¥ú·¥õ·¥õ·¥è…¥ !", show_alert=True)
    chat_id = query.message.chat.id
    if chat_id in QUEUE:
        try:
            await calls.leave_group_call(chat_id)
            await remove_active_chat(chat_id)
            clear_queue(chat_id)
            await query.edit_message_text("‚úÖ **·¥õ ú…™s s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢  ú·¥Äs ·¥á…¥·¥Ö·¥á·¥Ö**", reply_markup=close_mark)
        except Exception as e:
            traceback.print_exc()
            await query.edit_message_text(f"üö´ **·¥á Ä Ä·¥è Ä:**\n\n`{e}`", reply_markup=close_mark)
    else:
        await query.answer("‚ùå …¥·¥è·¥õ ú…™…¥…¢ …™s ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ü è s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢", show_alert=True)


@Client.on_callback_query(filters.regex("set_mute"))
@check_blacklist()
async def cbmute(_, query: CallbackQuery):
    a = await _.get_chat_member(query.message.chat.id, query.from_user.id)
    if not a.can_manage_voice_chats:
        return await query.answer("üí° ·¥è…¥ ü è ·¥Ä·¥Ö·¥ç…™…¥ ·¥°…™·¥õ ú ·¥ç·¥Ä…¥·¥Ä…¢·¥á ·¥†…™·¥Ö·¥á·¥è ·¥Ñ ú·¥Ä·¥õ ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥ ·¥õ ú·¥Ä·¥õ ·¥Ñ·¥Ä…¥ ·¥õ·¥Ä·¥ò ·¥õ ú…™s  ô·¥ú·¥õ·¥õ·¥è…¥ !", show_alert=True)
    chat_id = query.message.chat.id
    if chat_id in QUEUE:
        try:
            if not await is_music_playing(chat_id):
                await query.answer("‚ÑπÔ∏è ·¥õ ú·¥á s·¥õ Ä·¥á·¥Ä·¥ç ·¥ús·¥á Ä ô·¥è·¥õ …™s ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥ç·¥ú·¥õ·¥á·¥Ö.", show_alert=True)
                return
            await calls.mute_stream(chat_id)
            await music_off(chat_id)
            await query.answer("üîá ·¥õ ú·¥á s·¥õ Ä·¥á·¥Ä·¥ç ·¥ús·¥á Ä ô·¥è·¥õ  ú·¥Äs ·¥ç·¥ú·¥õ·¥á·¥Ö !\n\n¬ª ·¥õ·¥è ·¥ú…¥·¥ç·¥ú·¥õ·¥á ·¥õ ú·¥á ·¥ús·¥á Ä ô·¥è·¥õ ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ ·¥ú…¥·¥ç·¥ú·¥õ·¥á  ô·¥ú·¥õ·¥õ·¥è…¥ !", show_alert=True)
        except Exception as e:
            traceback.print_exc()
            await query.edit_message_text(f"üö´ **·¥á Ä Ä·¥è Ä:**\n\n`{e}`", reply_markup=close_mark)
    else:
        await query.answer("‚ùå …¥·¥è·¥õ ú…™…¥…¢ …™s ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ü è s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢", show_alert=True)


@Client.on_callback_query(filters.regex("set_unmute"))
@check_blacklist()
async def cbunmute(_, query: CallbackQuery):
    a = await _.get_chat_member(query.message.chat.id, query.from_user.id)
    if not a.can_manage_voice_chats:
        return await query.answer("üí° ·¥è…¥ ü è ·¥Ä·¥Ö·¥ç…™…¥ ·¥°…™·¥õ ú ·¥ç·¥Ä…¥·¥Ä…¢·¥á ·¥†…™·¥Ö·¥á·¥è ·¥Ñ ú·¥Ä·¥õ ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥ ·¥õ ú·¥Ä·¥õ ·¥Ñ·¥Ä…¥ ·¥õ·¥Ä·¥ò ·¥õ ú…™s  ô·¥ú·¥õ·¥õ·¥è…¥ !", show_alert=True)
    chat_id = query.message.chat.id
    if chat_id in QUEUE:
        try:
            if await is_music_playing(chat_id):
                await query.answer("‚ÑπÔ∏è ·¥õ ú·¥á s·¥õ Ä·¥á·¥Ä·¥ç ·¥ús·¥á Ä ô·¥è·¥õ …™s ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥ú…¥·¥ç·¥ú·¥õ·¥á·¥Ö.", show_alert=True)
                return
            await calls.unmute_stream(chat_id)
            await music_on(chat_id)
            await query.answer("üîä ·¥õ ú·¥á s·¥õ Ä·¥á·¥Ä·¥ç ·¥ús·¥á Ä ô·¥è·¥õ  ú·¥Äs ·¥ú…¥·¥ç·¥ú·¥õ·¥á·¥Ö !\n\n¬ª ·¥õ·¥è ·¥ç·¥ú·¥õ·¥á ·¥õ ú·¥á ·¥ús·¥á Ä ô·¥è·¥õ ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ ·¥ç·¥ú·¥õ·¥á  ô·¥ú·¥õ·¥õ·¥è…¥ !", show_alert=True)
        except Exception as e:
            traceback.print_exc()
            await query.edit_message_text(f"üö´ **·¥á Ä Ä·¥è Ä:**\n\n`{e}`", reply_markup=close_mark)
    else:
        await query.answer("‚ùå …¥·¥è·¥õ ú…™…¥…¢ …™s ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ü è s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢", show_alert=True)


@Client.on_message(
    command(["volume", f"volume@{BOT_USERNAME}", "vol"]) & other_filters
)
@authorized_users_only
@check_blacklist()
async def change_volume(client, m: Message):
    if len(m.command) < 2:
        await m.reply_text("usage: `/volume` (`0-200`)")
        return
    range = m.command[1]
    chat_id = m.chat.id
    if chat_id in QUEUE:
        try:
            await calls.change_volume_call(chat_id, volume=int(range))
            await m.reply(
                f"‚úÖ **·¥†·¥è ü·¥ú·¥ç·¥á s·¥á·¥õ ·¥õ·¥è** `{range}`%"
            )
        except Exception as e:
            traceback.print_exc()
            await m.reply(f"üö´ **·¥á Ä Ä·¥è Ä:**\n\n`{e}`")
    else:
        await m.reply("‚ùå **…¥·¥è·¥õ ú…™…¥…¢ …™…¥ s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢**")
